//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Aura3D.Core {
    using System;
    
    
    /// <summary>
    ///   一个强类型的资源类，用于查找本地化的字符串等。
    /// </summary>
    // 此类是由 StronglyTypedResourceBuilder
    // 类通过类似于 ResGen 或 Visual Studio 的工具自动生成的。
    // 若要添加或移除成员，请编辑 .ResX 文件，然后重新运行 ResGen
    // (以 /str 作为命令选项)，或重新生成 VS 项目。
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class ShaderResource {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ShaderResource() {
        }
        
        /// <summary>
        ///   返回此类使用的缓存的 ResourceManager 实例。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Aura3D.Core.ShaderResource", typeof(ShaderResource).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   重写当前线程的 CurrentUICulture 属性，对
        ///   使用此强类型资源类的所有资源查找执行重写。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///precision mediump float;
        ///out vec4 outColor;
        ///
        /////{{defines}}
        ///
        ///
        ///#ifdef SKYBOX
        ///	in vec3 vTexCoord;
        ///	uniform samplerCube uSkybox;
        ///#endif
        ///
        ///#ifdef BACKGROUND_TEXTURE
        ///	in vec2 vTexCoord;
        ///	uniform sampler2D uBackgroundTexture;
        ///#endif
        ///
        ///
        ///
        ///void main() 
        ///{
        ///#ifdef SKYBOX
        ///    outColor = texture(uSkybox, vTexCoord);
        ///
        ///#endif
        ///
        ///#ifdef BACKGROUND_TEXTURE
        ///	outColor = texture(uBackgroundTexture, vTexCoord);
        ///#endif
        ///	
        ///} 的本地化字符串。
        /// </summary>
        public static string BackgroundFrag {
            get {
                return ResourceManager.GetString("BackgroundFrag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///precision mediump float;
        ///
        /////{{defines}}
        ///
        ///layout(location = 0) in vec3 position;
        ///
        ///#ifdef BACKGROUND_TEXTURE
        ///layout(location = 1) in vec2 texCoord;
        ///#endif
        ///
        ///#ifdef SKYBOX
        ///	out vec3 vTexCoord;
        ///	uniform mat4 viewMatrix;
        ///	uniform mat4 projectionMatrix;
        ///#else
        ///	out vec2 vTexCoord;
        ///#endif
        ///
        ///
        ///void main()
        ///{
        ///#ifdef SKYBOX
        ///	vTexCoord = position;
        ///	gl_Position = projectionMatrix * viewMatrix * vec4(position, 1.0);
        ///#endif
        ///
        ///#ifdef BACKGROUND_TEXTURE
        ///	vTexCoord = texCoord;
        ///	gl_Posi [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        public static string BackgroundVert {
            get {
                return ResourceManager.GetString("BackgroundVert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///precision mediump float;
        ///out vec4 outColor;
        ///
        ///const float brightnessLevels[16] = float[](0.7, 0.85, 0.85, 0.85, 0.85, 0.85, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0);
        ///const float baseAmbient = 0.;
        ///
        /////{{defines}}
        ///
        ///#define MAX_DIRECTIONAL_LIGHTS 4
        ///#define MAX_POINT_LIGHTS 4
        ///#define MAX_SPOT_LIGHTS 4
        ///
        ///
        ///#define DL_SHADOW_ASSIGN(index) if (DirectionalLights[index].castShadow == 1.0) \
        ///	shadows[index] = CalculateShadow(DirectionalLights[index].shadowMapMatrix, DirectionalLigh [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        public static string CelFrag {
            get {
                return ResourceManager.GetString("CelFrag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找 System.Byte[] 类型的本地化资源。
        /// </summary>
        public static byte[] CelRamp {
            get {
                object obj = ResourceManager.GetObject("CelRamp", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   查找 System.Byte[] 类型的本地化资源。
        /// </summary>
        public static byte[] CelRamp2 {
            get {
                object obj = ResourceManager.GetObject("CelRamp2", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///precision mediump float;
        ///out vec4 outColor;
        ///
        /////{{defines}}
        ///
        ///#define MAX_DIRECTIONAL_LIGHTS 4
        ///#define MAX_POINT_LIGHTS 4
        ///#define MAX_SPOT_LIGHTS 4
        ///
        ///
        ///#define DL_SHADOW_ASSIGN(index) if (DirectionalLights[index].castShadow == 1.0) \
        ///	shadows[index] = CalculateShadow(DirectionalLights[index].shadowMapMatrix, DirectionalLightShadowMaps[index]); \
        ///	else \
        ///	shadows[index] = 1.0;
        ///
        ///#define PL_SHADOW_ASSIGN(index) if (PointLights[index].castShadow == 1.0) \
        ///	shadows[index] = Calculate [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        public static string MeshFrag {
            get {
                return ResourceManager.GetString("MeshFrag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///precision mediump float;
        ///
        ///#define BONE_NUMBER 100
        ///
        ///#define MAX_DIRECTIONAL_LIGHTS 4
        ///#define MAX_POINT_LIGHTS 4
        ///#define MAX_SPOT_LIGHTS 4
        ///
        /////{{defines}}
        ///
        ///layout(location = 0) in vec3 position;
        ///layout(location = 1) in vec2 texCoord;
        ///layout(location = 2) in vec3 normal;
        ///layout(location = 3) in vec3 tangent;
        ///layout(location = 4) in vec3 bitangent;
        ///
        ///#ifdef SKINNED_MESH
        ///layout(location = 5) in vec4 boneIndices;
        ///layout(location = 6) in vec4 boneWeights;
        ///
        ///uniform mat4 BoneMatric [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        public static string MeshVert {
            get {
                return ResourceManager.GetString("MeshVert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///precision mediump float;
        ///out vec4 outColor;
        ///
        ///
        ///
        ///
        ///in vec2 vTexCoord;
        ///
        ///uniform sampler2D BaseColorTexture;
        ///uniform vec4 BaseColor;
        ///uniform int HasBaseColorTexture;
        ///uniform float alphaCutoff;
        ///
        ///void main()
        ///{
        ///	vec4 baseColor = BaseColor;
        ///
        ///	if (HasBaseColorTexture == 1)
        ///	{
        ///		baseColor = texture(BaseColorTexture, vTexCoord);
        ///	}
        ///
        ///	#if defined(BLENDMODE_MASKED) || defined(BLENDMODE_TRANSLUCENT)
        ///		if (baseColor.a &lt;= alphaCutoff)
        ///			discard;
        ///	#endif
        ///	outColor = baseColor;
        ///} 的本地化字符串。
        /// </summary>
        public static string NoLightFrag {
            get {
                return ResourceManager.GetString("NoLightFrag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///precision mediump float;
        ///
        ///#define BONE_NUMBER 100
        ///
        /////{{defines}}
        ///
        ///layout(location = 0) in vec3 position;
        ///layout(location = 1) in vec2 texCoord;
        ///layout(location = 2) in vec3 normal;
        ///layout(location = 3) in vec3 tangent;
        ///layout(location = 4) in vec3 bitangent;
        ///
        ///#ifdef SKINNED_MESH
        ///
        ///layout(location = 5) in vec4 boneIndices;
        ///layout(location = 6) in vec4 boneWeights;
        ///
        ///uniform mat4 BoneMatrices[BONE_NUMBER];
        ///
        ///#endif
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///unifor [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        public static string NoLightVert {
            get {
                return ResourceManager.GetString("NoLightVert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///precision mediump float;
        ///out vec4 outColor;
        ///
        ///
        ///
        ///in vec2 vTexCoord;
        ///in vec3 vFragPosition;
        ///in mat3 vTBN;
        ///in vec3 vNormal;
        ///
        ///uniform vec4 BaseColor;
        ///
        ///uniform vec3 cameraPosition;
        ///
        ///
        ///void main()
        ///{
        ///	outColor = BaseColor;
        ///} 的本地化字符串。
        /// </summary>
        public static string OutlineFrag {
            get {
                return ResourceManager.GetString("OutlineFrag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///precision mediump float;
        ///
        ///#define BONE_NUMBER 100
        ///
        ///
        ///layout(location = 0) in vec3 position;
        ///layout(location = 1) in vec2 texCoord;
        ///layout(location = 2) in vec3 normal;
        ///layout(location = 3) in vec3 tangent;
        ///layout(location = 4) in vec3 bitangent;
        ///
        ///#ifdef SKINNED_MESH
        ///layout(location = 5) in vec4 boneIndices;
        ///layout(location = 6) in vec4 boneWeights;
        ///
        ///uniform mat4 BoneMatrices[BONE_NUMBER];
        ///
        ///#endif
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projection [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        public static string OutlineVert {
            get {
                return ResourceManager.GetString("OutlineVert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///precision mediump float;
        ///
        /////{{defines}}
        ///
        ///#ifdef BLENDMODE_MASKED
        ///
        ///in vec2 vTexCoord;
        ///
        ///uniform sampler2D BaseColorTexture;
        ///
        ///#endif
        ///
        ///void main()
        ///{
        ///
        ///#ifdef BLENDMODE_MASKED
        ///	vec4 outColor = texture(BaseColorTexture, vTexCoord);
        ///	if (outColor.a &lt;= 0.0)
        ///		discard;
        ///#endif
        ///} 的本地化字符串。
        /// </summary>
        public static string ShadowMapFrag {
            get {
                return ResourceManager.GetString("ShadowMapFrag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///precision mediump float;
        ///
        /////{{defines}}
        ///
        ///layout(location = 0) in vec3 position;
        ///
        ///#ifdef BLENDMODE_MASKED
        ///layout(location = 1) in vec2 texCoord;
        ///#endif
        ///
        ///uniform mat4 modelMatrix;
        ///uniform mat4 viewMatrix;
        ///uniform mat4 projectionMatrix;
        ///
        ///#ifdef BLENDMODE_MASKED
        ///out vec2 vTexCoord;
        ///#endif
        ///
        ///void main()
        ///{
        ///#ifdef BLENDMODE_MASKED
        ///	vTexCoord = texCoord;
        ///#endif
        ///	gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);
        ///} 的本地化字符串。
        /// </summary>
        public static string ShadowMapVert {
            get {
                return ResourceManager.GetString("ShadowMapVert", resourceCulture);
            }
        }
    }
}
